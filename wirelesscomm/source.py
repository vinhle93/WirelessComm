"""
==========
Source Model
==========
"""
from numpy import zeros, random

import wirelesscomm.sink

__all__ = ['Source']

class Source():
    """
    A data source generator
    ==================================

    Parameters
    ----------
    frame_size :    int
                    Size of the generated frames

    frame_type :    int in {0,1}
                    Type of generated frame
                    0: random (Default)
                    1: all zeros


    Attributes
    ----------
    frame_size :        int
                        Size of frames generated by source

    frame_type :        int in {0,1}
                        Type of generated frame (random, all zeros)

    generated_frame :   1D ndarray
                        Last generated frame, after using generate()

    have_sink :         boolean
                        True if the source have a sink, False otherwise

    sink :              wirelesscomm.sink.Sink
                        Reference to a Sink instance


    """

    def __init__(self, frame_size, frame_type=0):
        """Initialize frame_size and frame_type for source generator"""
        self.frame_size = frame_size
        self.frame_type = frame_type
        self.generated_frame = None
        self.have_sink = False
        self.sink = None

    def generate(self):
        if self.frame_type == 0:
            self.generated_frame = random.randint(0,2,self.frame_size)
        else:
            self.generated_frame = zeros(self.frame_size, dtype=int)
        if self.have_sink:
            self.sink.set_origin_frame(self.generated_frame)
        return self.generated_frame

    def get_generated_frame(self):
        return self.generated_frame

    def get_frame_size(self):
        return self.frame_size

    def set_sink(self, sink):
        if not self.have_sink:
            self.sink = sink
            self.have_sink = True
        else:
            raise ValueError("A source can only have one sink.")

    def set_frame_size(self, frame_size):
        self.frame_size = frame_size
        if self.have_sink:
            self.sink.frame_size = frame_size
